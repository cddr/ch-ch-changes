#!/usr/bin/env ruby
require 'rugged'
require 'semantic'
require 'pathname'

REPO = Rugged::Repository.new("./.git")
HEAD = {:semver => "HEAD", :ref => REPO.head}
INIT = {:semver => "INIT", :repo => nil}
CURRENT_BRANCH = REPO.head.name.sub(/^refs\/heads\//, '')

# wraps the input tag in a dict together with the semver
def semversion(tag)
  semver = Pathname.new(tag.name).basename.to_s[1..-1]
  begin
    Semantic::Version.new(semver)
  rescue ArgumentError
    nil
  end
end

def sorted_tags
  repo = REPO
  wrapped_refs = repo.refs("refs/tags/v*").map do |ref|
    {:semver => semversion(ref),
      :ref => ref}
  end.compact

  wrapped_refs.sort do |a, b|
    a[:semver] <=> b[:semver]
  end.reverse
end

def print_commit (commit)
  header, *body = commit.message.lines
  indented_body = body.map { |line| "   #{line}" }
  puts " * #{header}"
  puts "   #{indented_body.join}" unless body == []
end

def commits_between(from, to)
  repo = REPO
  walker = Rugged::Walker.new repo
  to = to.target if to.respond_to?(:target)
  if (from.is_a?(Rugged::Tag) || from.nil?)
    walker.push to
    walker.hide from.target if from

    walker.walk do |commit|
      yield commit
    end
  else
    puts "  Could not parse commit history for the range"
    puts "    from: #{from}"
    puts "    to: #{to}"
  end
end

puts "# Changelog"
([HEAD] + sorted_tags + [INIT]).each_cons(2) do |later, earlier|
  if later[:ref] == HEAD[:ref]
    puts
    puts "## Unreleased Changes (#{CURRENT_BRANCH})"
    from = REPO.lookup(earlier[:ref].target) if earlier
    to = REPO.lookup(later[:ref].target)
    commits_between from, to do |commit|
      print_commit commit
    end
  else
    puts
    puts "## from #{earlier[:semver]} to #{later[:semver]}"
    from = REPO.lookup(earlier[:ref].target) if earlier[:ref]
    to = REPO.lookup(later[:ref].target)
    commits_between from, to do |commit|
      print_commit commit
    end
  end
end

